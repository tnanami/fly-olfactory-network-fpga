----------------------------------------------------------------------------------
-- Company:
-- Engineer:
--
-- Create Date: 2020/12/01 03:00:10
-- Design Name:
-- Module Name: dssn_glomeruli_ctrl - Behavioral
-- Project Name:
-- Target Devices:
-- Tool Versions:
-- Description:
--
-- Dependencies:
--
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
--
----------------------------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.std_logic_unsigned.ALL;
--USE IEEE.std_logic_signed.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

ENTITY dssn_ctrl IS
	PORT (
		clk100 : IN STD_LOGIC;
		clk1k : IN STD_LOGIC;
		clk1 : IN STD_LOGIC;
		PORT_mem_LNPN_I_addrb : OUT STD_LOGIC_VECTOR(8 DOWNTO 0);
		PORT_mem_LNPN_I_doutb : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_mem_LNPN_I_inhi_addrb : OUT STD_LOGIC_VECTOR(8 DOWNTO 0);
		PORT_mem_LNPN_I_inhi_doutb : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_mem_LNPN_sc_addra : OUT STD_LOGIC_VECTOR(8 DOWNTO 0);
		PORT_mem_LNPN_sc_dina : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_mem_LNPN_sc_douta : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_mem_LNPN_sc_wea : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
		PORT_mem_KC_I_addrb : OUT STD_LOGIC_VECTOR(10 DOWNTO 0);
		PORT_mem_KC_I_doutb : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_mem_KC_sc_addra : OUT STD_LOGIC_VECTOR(10 DOWNTO 0);
		PORT_mem_KC_sc_dina : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_mem_KC_sc_douta : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_mem_KC_sc_wea : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
		PORT_mem_KC_sr_addra : OUT STD_LOGIC_VECTOR(10 DOWNTO 0);
		PORT_mem_KC_sr_dina : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_mem_KC_sr_douta : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_mem_KC_sr_wea : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
		PORT_mem_APL_I : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_mem_APL_sc : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_mem_MBON0_I : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_mem_MBON0_sc : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_mem_MBON1_I : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_mem_MBON1_sc : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_mem_CREPINE_I : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_mem_CREPINE_sc : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_dssn_glomeruli_id : OUT STD_LOGIC_VECTOR(11 DOWNTO 0);
		PORT_dssn_glomeruli_wr_en : OUT STD_LOGIC;
		PORT_mem_PN_sc_addra : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
		PORT_mem_PN_sc_dina : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_mem_PN_sc_wea : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
		PORT_UART_DATA_COUPLED : IN STD_LOGIC_VECTOR(11 DOWNTO 0);
		PORT_UART_RX_PACKET_COUPLE_DONE : IN STD_LOGIC;
		PORT_LN0_for_measuring : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_LN1_for_measuring : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_LN2_for_measuring : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_LN3_for_measuring : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_PN_for_measuring : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_KC_for_measuring : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_MBON_for_measuring : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_APL_for_measuring : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
		PORT_CREPINE_for_measuring : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
	);
END dssn_ctrl;

ARCHITECTURE Behavioral OF dssn_ctrl IS

	COMPONENT DSSN_Krasavietz_class1 IS
		PORT (
			clk : IN STD_LOGIC;
			PORT_Iin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_vin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_nin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_qin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_sin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_uin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_fcin : IN STD_LOGIC_VECTOR(9 DOWNTO 0);
			PORT_vout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_nout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_qout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_sout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_uout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_fcout : OUT STD_LOGIC_VECTOR(9 DOWNTO 0);
			PORT_spike_flag : OUT STD_LOGIC_VECTOR(0 DOWNTO 0)
		);
	END COMPONENT;
	COMPONENT DSSN_Krasavietz_class2 IS
		PORT (
			clk : IN STD_LOGIC;
			PORT_Iin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_vin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_nin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_qin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_sin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_uin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_fcin : IN STD_LOGIC_VECTOR(9 DOWNTO 0);
			PORT_vout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_nout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_qout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_sout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_uout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_fcout : OUT STD_LOGIC_VECTOR(9 DOWNTO 0);
			PORT_spike_flag : OUT STD_LOGIC_VECTOR(0 DOWNTO 0)
		);
	END COMPONENT;
	COMPONENT DSSN_NP1227_class1 IS
		PORT (
			clk : IN STD_LOGIC;
			PORT_Iin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_vin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_nin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_qin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_sin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_uin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_fcin : IN STD_LOGIC_VECTOR(9 DOWNTO 0);
			PORT_vout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_nout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_qout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_sout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_uout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_fcout : OUT STD_LOGIC_VECTOR(9 DOWNTO 0);
			PORT_spike_flag : OUT STD_LOGIC_VECTOR(0 DOWNTO 0)
		);
	END COMPONENT;
	COMPONENT DSSN_NP2426_class1 IS
		PORT (
			clk : IN STD_LOGIC;
			PORT_Iin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_vin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_nin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_qin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_sin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_uin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_fcin : IN STD_LOGIC_VECTOR(9 DOWNTO 0);
			PORT_vout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_nout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_qout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_sout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_uout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_fcout : OUT STD_LOGIC_VECTOR(9 DOWNTO 0);
			PORT_spike_flag : OUT STD_LOGIC_VECTOR(0 DOWNTO 0)
		);
	END COMPONENT;
	COMPONENT DSSN_PN IS
		PORT (
			clk : IN STD_LOGIC;
			PORT_Iin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_vin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_nin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_qin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_sin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_uin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_fcin : IN STD_LOGIC_VECTOR(9 DOWNTO 0);
			PORT_vout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_nout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_qout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_sout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_uout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_fcout : OUT STD_LOGIC_VECTOR(9 DOWNTO 0);
			PORT_spike_flag : OUT STD_LOGIC_VECTOR(0 DOWNTO 0)
		);
	END COMPONENT;

	COMPONENT DSSN_KC IS
		PORT (
			clk : IN STD_LOGIC;
			PORT_Iin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_vin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_nin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_qin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_sin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_uin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_fcin : IN STD_LOGIC_VECTOR(9 DOWNTO 0);
			PORT_vout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_nout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_qout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_sout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_uout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_fcout : OUT STD_LOGIC_VECTOR(9 DOWNTO 0);
			PORT_spike_flag : OUT STD_LOGIC_VECTOR(0 DOWNTO 0)
		);
	END COMPONENT;
	COMPONENT DSSN_APL IS
		PORT (
			clk : IN STD_LOGIC;
			PORT_Iin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_vin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_nin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_qin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_sin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_uin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_fcin : IN STD_LOGIC_VECTOR(9 DOWNTO 0);
			PORT_vout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_nout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_qout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_sout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_uout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_fcout : OUT STD_LOGIC_VECTOR(9 DOWNTO 0);
			PORT_spike_flag : OUT STD_LOGIC_VECTOR(0 DOWNTO 0)
		);
	END COMPONENT;
	COMPONENT DSSN_MBON IS
		PORT (
			clk : IN STD_LOGIC;
			PORT_Iin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_vin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_nin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_qin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_sin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_uin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_fcin : IN STD_LOGIC_VECTOR(9 DOWNTO 0);
			PORT_vout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_nout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_qout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_sout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_uout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_fcout : OUT STD_LOGIC_VECTOR(9 DOWNTO 0);
			PORT_spike_flag : OUT STD_LOGIC_VECTOR(0 DOWNTO 0)
		);
	END COMPONENT;
	COMPONENT DSSN_CREPINE IS
		PORT (
			clk : IN STD_LOGIC;
			PORT_Iin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_vin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_nin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_qin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_sin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_uin : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_fcin : IN STD_LOGIC_VECTOR(9 DOWNTO 0);
			PORT_vout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_nout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_qout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_sout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_uout : OUT STD_LOGIC_VECTOR(17 DOWNTO 0);
			PORT_fcout : OUT STD_LOGIC_VECTOR(9 DOWNTO 0);
			PORT_spike_flag : OUT STD_LOGIC_VECTOR(0 DOWNTO 0)
		);
	END COMPONENT;

	COMPONENT blk_mem_v IS
		PORT (
			clka : IN STD_LOGIC;
			wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
			addra : IN STD_LOGIC_VECTOR(11 DOWNTO 0);
			dina : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
		);
	END COMPONENT;
	COMPONENT blk_mem_n IS
		PORT (
			clka : IN STD_LOGIC;
			wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
			addra : IN STD_LOGIC_VECTOR(11 DOWNTO 0);
			dina : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
		);
	END COMPONENT;
	COMPONENT blk_mem_q IS
		PORT (
			clka : IN STD_LOGIC;
			wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
			addra : IN STD_LOGIC_VECTOR(11 DOWNTO 0);
			dina : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
		);
	END COMPONENT;
	COMPONENT blk_mem_u IS
		PORT (
			clka : IN STD_LOGIC;
			wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
			addra : IN STD_LOGIC_VECTOR(11 DOWNTO 0);
			dina : IN STD_LOGIC_VECTOR(17 DOWNTO 0);
			douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
		);
	END COMPONENT;
	COMPONENT blk_mem_fc IS
		PORT (
			clka : IN STD_LOGIC;
			wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
			addra : IN STD_LOGIC_VECTOR(11 DOWNTO 0);
			dina : IN STD_LOGIC_VECTOR(9 DOWNTO 0);
			douta : OUT STD_LOGIC_VECTOR(9 DOWNTO 0)
		);
	END COMPONENT;

	TYPE STATE_TYPE IS (READY, UPDATING0, UPDATING1, UPDATING2, UPDATING_END);
	SIGNAL STATE : STATE_TYPE := READY;
	TYPE STATE_Istim_switch_TYPE IS (READY, CONNECTED);
	SIGNAL STATE_Istim_switch : STATE_Istim_switch_TYPE := READY;
	SIGNAL mem_LNPN_I_doutb : STD_LOGIC_VECTOR(17 DOWNTO 0);
	SIGNAL mem_LNPN_I_addrb : STD_LOGIC_VECTOR(8 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_addra_LN0_MAX : STD_LOGIC_VECTOR(11 DOWNTO 0) := "000000101100";--44 "000000000000";--
	SIGNAL mem_addra_LN1_MAX : STD_LOGIC_VECTOR(11 DOWNTO 0) := "000001010111";--87
	SIGNAL mem_addra_LN2_MAX : STD_LOGIC_VECTOR(11 DOWNTO 0) := "000010000010";--130
	SIGNAL mem_addra_LN3_MAX : STD_LOGIC_VECTOR(11 DOWNTO 0) := "000010101101";--173
	SIGNAL mem_addra_PN_MAX : STD_LOGIC_VECTOR(11 DOWNTO 0) := "000100100011";--291
	SIGNAL mem_addra_KC_MAX : STD_LOGIC_VECTOR(12 DOWNTO 0) := "0100010100100";--2212
	SIGNAL mem_addra_APL_MAX : STD_LOGIC_VECTOR(12 DOWNTO 0) := "0100010100101";--2213
	SIGNAL mem_addra_MBON0_MAX : STD_LOGIC_VECTOR(12 DOWNTO 0) := "0100010100110";--2214
	SIGNAL mem_addra_MBON1_MAX : STD_LOGIC_VECTOR(12 DOWNTO 0) := "0100010100111";--2215
	SIGNAL mem_addra_CREPINE_MAX : STD_LOGIC_VECTOR(12 DOWNTO 0) := "0100010101000";--2216
	SIGNAL ZERO1 : STD_LOGIC_VECTOR(0 DOWNTO 0) := (OTHERS => '0');
	SIGNAL ZERO9 : STD_LOGIC_VECTOR(8 DOWNTO 0) := (OTHERS => '0');
	SIGNAL ZERO11 : STD_LOGIC_VECTOR(10 DOWNTO 0) := (OTHERS => '0');
	SIGNAL ZERO12 : STD_LOGIC_VECTOR(11 DOWNTO 0) := (OTHERS => '0');
	SIGNAL ZERO18 : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL COUNTER3 : STD_LOGIC_VECTOR(3 DOWNTO 0) := (OTHERS => '0');
	SIGNAL COUNTER_Istim : STD_LOGIC_VECTOR(3 DOWNTO 0) := (OTHERS => '0');
	SIGNAL COUNTER_Istim1 : STD_LOGIC_VECTOR(3 DOWNTO 0) := (OTHERS => '0');
	SIGNAL COUNTER_Istim_switch : STD_LOGIC_VECTOR(3 DOWNTO 0) := (OTHERS => '0');
	SIGNAL Istim : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL Istim_switched : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL dssn_Iin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL dssn_vin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL dssn_nin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL dssn_qin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL dssn_sin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL dssn_vout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL dssn_nout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL dssn_qout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL dssn_sout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL dssn_spike_flag : STD_LOGIC_VECTOR(0 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_v_wea : STD_LOGIC_VECTOR(0 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_v_addra : STD_LOGIC_VECTOR(11 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_v_dina : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_v_douta : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_n_wea : STD_LOGIC_VECTOR(0 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_n_addra : STD_LOGIC_VECTOR(11 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_n_dina : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_n_douta : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_q_wea : STD_LOGIC_VECTOR(0 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_q_addra : STD_LOGIC_VECTOR(11 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_q_dina : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_q_douta : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_u_wea : STD_LOGIC_VECTOR(0 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_u_addra : STD_LOGIC_VECTOR(11 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_u_dina : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_u_douta : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_fc_wea : STD_LOGIC_VECTOR(0 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_fc_addra : STD_LOGIC_VECTOR(11 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_fc_dina : STD_LOGIC_VECTOR(9 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_fc_douta : STD_LOGIC_VECTOR(9 DOWNTO 0) := (OTHERS => '0');
	SIGNAL cIstim_temp0 : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL cIstim_temp1 : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_addra : STD_LOGIC_VECTOR(11 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_PN_sc_addra : STD_LOGIC_VECTOR(11 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_KC_addra : STD_LOGIC_VECTOR(11 DOWNTO 0) := (OTHERS => '0');
	SIGNAL dssn_id_for_measuring : STD_LOGIC_VECTOR(15 DOWNTO 0) := (OTHERS => '0');
	SIGNAL ORN_addra_MAX : STD_LOGIC_VECTOR(15 DOWNTO 0) := "0000010101101101"; --1389

	SIGNAL DSSN_Krasavietz_class1_Iin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_Krasavietz_class1_vin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_Krasavietz_class1_nin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_Krasavietz_class1_qin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_Krasavietz_class1_sin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_Krasavietz_class1_uin : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000010000000000";
	SIGNAL DSSN_Krasavietz_class1_fcin : STD_LOGIC_VECTOR(9 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_Krasavietz_class1_vout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_Krasavietz_class1_nout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_Krasavietz_class1_qout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_Krasavietz_class1_sout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_Krasavietz_class1_uout : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000010000000000";
	SIGNAL DSSN_Krasavietz_class1_fcout : STD_LOGIC_VECTOR(9 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_Krasavietz_class1_spike_flag : STD_LOGIC_VECTOR(0 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_Krasavietz_class2_Iin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_Krasavietz_class2_vin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_Krasavietz_class2_nin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_Krasavietz_class2_qin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_Krasavietz_class2_sin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_Krasavietz_class2_uin : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000010000000000";
	SIGNAL DSSN_Krasavietz_class2_fcin : STD_LOGIC_VECTOR(9 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_Krasavietz_class2_vout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_Krasavietz_class2_nout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_Krasavietz_class2_qout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_Krasavietz_class2_sout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_Krasavietz_class2_uout : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000010000000000";
	SIGNAL DSSN_Krasavietz_class2_fcout : STD_LOGIC_VECTOR(9 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_Krasavietz_class2_spike_flag : STD_LOGIC_VECTOR(0 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP1227_class1_Iin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP1227_class1_vin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP1227_class1_nin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP1227_class1_qin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP1227_class1_sin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP1227_class1_uin : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000010000000000";
	SIGNAL DSSN_NP1227_class1_fcin : STD_LOGIC_VECTOR(9 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP1227_class1_vout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP1227_class1_nout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP1227_class1_qout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP1227_class1_sout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP1227_class1_uout : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000010000000000";
	SIGNAL DSSN_NP1227_class1_fcout : STD_LOGIC_VECTOR(9 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP1227_class1_spike_flag : STD_LOGIC_VECTOR(0 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP2426_class1_Iin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP2426_class1_vin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP2426_class1_nin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP2426_class1_qin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP2426_class1_sin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP2426_class1_uin : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000010000000000";
	SIGNAL DSSN_NP2426_class1_fcin : STD_LOGIC_VECTOR(9 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP2426_class1_vout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP2426_class1_nout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP2426_class1_qout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP2426_class1_sout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP2426_class1_uout : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000010000000000";
	SIGNAL DSSN_NP2426_class1_fcout : STD_LOGIC_VECTOR(9 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_NP2426_class1_spike_flag : STD_LOGIC_VECTOR(0 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_PN_Iin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_PN_vin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_PN_nin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_PN_qin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_PN_sin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_PN_uin : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000010000000000";
	SIGNAL DSSN_PN_fcin : STD_LOGIC_VECTOR(9 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_PN_vout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_PN_nout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_PN_qout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_PN_sout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_PN_uout : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000010000000000";
	SIGNAL DSSN_PN_fcout : STD_LOGIC_VECTOR(9 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_PN_spike_flag : STD_LOGIC_VECTOR(0 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_KC_Iin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_KC_vin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_KC_nin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_KC_qin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_KC_sin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_KC_uin : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000010000000000";
	SIGNAL DSSN_KC_fcin : STD_LOGIC_VECTOR(9 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_KC_vout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_KC_nout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_KC_qout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_KC_sout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_KC_uout : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000010000000000";
	SIGNAL DSSN_KC_fcout : STD_LOGIC_VECTOR(9 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_KC_spike_flag : STD_LOGIC_VECTOR(0 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_APL_Iin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_APL_vin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_APL_nin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_APL_qin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_APL_sin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_APL_uin : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000010000000000";
	SIGNAL DSSN_APL_fcin : STD_LOGIC_VECTOR(9 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_APL_vout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_APL_nout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_APL_qout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_APL_sout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_APL_uout : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000010000000000";
	SIGNAL DSSN_APL_fcout : STD_LOGIC_VECTOR(9 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_APL_spike_flag : STD_LOGIC_VECTOR(0 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_MBON_Iin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_MBON_vin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_MBON_nin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_MBON_qin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_MBON_sin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_MBON_uin : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000010000000000";
	SIGNAL DSSN_MBON_fcin : STD_LOGIC_VECTOR(9 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_MBON_vout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_MBON_nout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_MBON_qout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_MBON_sout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_MBON_uout : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000010000000000";
	SIGNAL DSSN_MBON_fcout : STD_LOGIC_VECTOR(9 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_MBON_spike_flag : STD_LOGIC_VECTOR(0 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_CREPINE_Iin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_CREPINE_vin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_CREPINE_nin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_CREPINE_qin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_CREPINE_sin : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_CREPINE_uin : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000010000000000";
	SIGNAL DSSN_CREPINE_fcin : STD_LOGIC_VECTOR(9 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_CREPINE_vout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_CREPINE_nout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_CREPINE_qout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_CREPINE_sout : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_CREPINE_uout : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000010000000000";
	SIGNAL DSSN_CREPINE_fcout : STD_LOGIC_VECTOR(9 DOWNTO 0) := (OTHERS => '0');
	SIGNAL DSSN_CREPINE_spike_flag : STD_LOGIC_VECTOR(0 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_APL_sc : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_MBON0_sc : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_MBON1_sc : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL mem_CREPINE_sc : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	--SIGNAL mem_KC_sr_const : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000001001110001000";-- 5000
	--SIGNAL mem_KC_sr_const : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000111110100";-- 500
	SIGNAL mem_KC_sr_const : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000111110100000";-- 4000
	--SIGNAL cIstim0 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000110011001";-- 0.4
	SIGNAL cIstim0 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001000000000";-- 0.5
	--SIGNAL cIstim1 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000001100110"; --0.1
	--SIGNAL cIstim1 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001000000000";-- 0.5
	SIGNAL cIstim1 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000110011001";-- 0.4
	--SIGNAL cIstim1 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000001100110";-- 0.1
	SIGNAL cIstim2 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001100110011";-- 0.8
	SIGNAL vini : STD_LOGIC_VECTOR(17 DOWNTO 0) := "111110110011101100";-- -4.76953125
	SIGNAL nini : STD_LOGIC_VECTOR(17 DOWNTO 0) := "001101010101101101";-- 53.3564453125
	SIGNAL qini : STD_LOGIC_VECTOR(17 DOWNTO 0) := "111110110100000011";-- -4.7470703125

	SIGNAL homeostasis_flag0 : STD_LOGIC_VECTOR(0 DOWNTO 0) := "0";
	SIGNAL homeostasis_counter0 : STD_LOGIC_VECTOR(11 DOWNTO 0) := (OTHERS => '0');
	SIGNAL homeostasis_counter0_max : STD_LOGIC_VECTOR(11 DOWNTO 0) := "000100101100";-- 300
	SIGNAL homeostasis_flag1 : STD_LOGIC_VECTOR(0 DOWNTO 0) := "0";
	SIGNAL homeostasis_counter1 : STD_LOGIC_VECTOR(9 DOWNTO 0) := (OTHERS => '0');
	SIGNAL homeostasis_counter1_max : STD_LOGIC_VECTOR(10 DOWNTO 0) := "01111101000";-- 1000
	SIGNAL UART_DATA_HSTART : STD_LOGIC_VECTOR(12 DOWNTO 0) := "0100010101010";--2218
	SIGNAL UART_DATA_HEND : STD_LOGIC_VECTOR(12 DOWNTO 0) := "0100010101011";--2219
	TYPE STATE_homeostasis_TYPE IS (READY, ACTIVE);
	SIGNAL STATE_homeostasis : STATE_homeostasis_TYPE := READY;

	SIGNAL UART_DATA_ESHOCK : STD_LOGIC_VECTOR(12 DOWNTO 0) := "0100010101001";--2217
	SIGNAL EshockToDssnid_flag0 : STD_LOGIC_VECTOR(0 DOWNTO 0) := "0";
	SIGNAL EshockToDssnid_flag1 : STD_LOGIC_VECTOR(0 DOWNTO 0) := "0";

	SIGNAL dssn_id_tx_counter : STD_LOGIC_VECTOR(9 DOWNTO 0) := (OTHERS => '0');
	SIGNAL dssn_id_tx_counter_max : STD_LOGIC_VECTOR(9 DOWNTO 0) := "0001000000";-- 64
	SIGNAL PN_u_sum : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL PN_v_sum : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL KC_v_sum : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL LN_v_sum : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');
	SIGNAL spike_counter_0 : STD_LOGIC_VECTOR(17 DOWNTO 0) := (OTHERS => '0');

	SIGNAL Iin_counter0 : STD_LOGIC_VECTOR(39 DOWNTO 0) := (OTHERS => '0');
	TYPE STATE_Iin_TYPE IS (READY, Ion0, Ioff0, Ion1, Ioff1, Ion2, Ioff2, Ion3, Ioff3, Ion4, Ioff4, Ion5, Ioff5, Ion6, Ioff6, Ion7, Ioff7);
	SIGNAL STATE_Iin : STATE_Iin_TYPE := READY;
	SIGNAL Iin_counter1 : STD_LOGIC_VECTOR(39 DOWNTO 0) := (OTHERS => '0');
	TYPE STATE_Iin1_TYPE IS (READY, Ion0, Ioff0, Ion1, Ioff1, Ion2, Ioff2, Ion3, Ioff3, Ion4, Ioff4, Ion5, Ioff5, Ion6, Ioff6, Ion7, Ioff7);
	SIGNAL STATE_Iin1 : STATE_Iin1_TYPE := READY;
	SIGNAL Iin_counter2 : STD_LOGIC_VECTOR(39 DOWNTO 0) := (OTHERS => '0');
	TYPE STATE_Iin2_TYPE IS (READY, Ion0, Ioff0, Ion1, Ioff1, Ion2, Ioff2, Ion3, Ioff3, Ion4, Ioff4);
	SIGNAL STATE_Iin2 : STATE_Iin2_TYPE := READY;

    SIGNAL I00 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000000000000"; --0
    SIGNAL I01 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000001100110"; --0.1
    SIGNAL I02 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000011001100"; --0.2
    SIGNAL I03 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000100110011"; --0.3
    SIGNAL I04 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000110011001"; --0.4
    SIGNAL I05 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001000000000"; --0.5
    SIGNAL I06 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001001100110"; --0.6
    SIGNAL I07 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001011001100"; --0.7
    SIGNAL I10 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000100110011"; --0.3
    SIGNAL I11 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000110011001"; --0.4
    SIGNAL I12 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001000000000"; --0.5
    SIGNAL I13 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001001100110"; --0.6
    SIGNAL I14 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001011001100"; --0.7
    SIGNAL I15 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001100110011"; --0.8
    SIGNAL I16 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001110011001"; --0.9
    SIGNAL I17 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001110011001"; --0.9
    SIGNAL I20 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000000000000"; --0
    SIGNAL I21 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000000110011"; --0.05
    SIGNAL I22 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000001100110"; --0.1
    SIGNAL I23 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000010011001"; --0.15
    SIGNAL I24 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000011001100"; --0.2
    SIGNAL I25 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000100000000"; --0.25
    SIGNAL I26 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000100110011"; --0.3
    SIGNAL I27 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000101100110"; --0.35
    SIGNAL I30 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000011001100"; --0.2
    SIGNAL I31 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000100110011"; --0.3
    SIGNAL I32 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000110011001"; --0.4
    SIGNAL I33 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001000000000"; --0.5
    SIGNAL I34 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001001100110"; --0.6
    SIGNAL I35 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001011001100"; --0.7
    SIGNAL I36 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001100110011"; --0.8
    SIGNAL I37 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001110011001"; --0.9
	SIGNAL I40 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000100110011"; --0.3
	SIGNAL I41 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000110011001"; --0.4
	SIGNAL I42 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001000000000"; --0.5
	SIGNAL I43 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001001100110"; --0.6
	SIGNAL I44 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001011001100"; --0.7
	SIGNAL I45 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001100110011"; --0.8
    SIGNAL I46 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001110011001"; --0.9
    SIGNAL I47 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000010000000000"; --1
	SIGNAL I50 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000100110011"; --0.3
    SIGNAL I51 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000110011001"; --0.4
    SIGNAL I52 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001000000000"; --0.5
    SIGNAL I53 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001001100110"; --0.6
    SIGNAL I54 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001011001100"; --0.7
    SIGNAL I55 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001100110011"; --0.8
    SIGNAL I56 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001110011001"; --0.9
    SIGNAL I57 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000010000000000"; --1	
    SIGNAL I60 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000011001100"; --0.2   
	SIGNAL I61 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000110011001"; --0.4
	SIGNAL I62 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001001100110"; --0.6
	SIGNAL I63 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001100110011"; --0.8
	SIGNAL I64 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000010000000000"; --1
	SIGNAL I70 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000110011001"; --0.4
	SIGNAL I71 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001001100110"; --0.6
	SIGNAL I72 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001100110011"; --0.8
	SIGNAL I80 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000110011001"; --0.4
	SIGNAL I81 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001001100110"; --0.6
	SIGNAL I82 : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000001100110011"; --0.8
BEGIN
	mem_LNPN_I_doutb <= PORT_mem_LNPN_I_doutb;
	PORT_mem_PN_sc_addra <= mem_PN_sc_addra(6 DOWNTO 0);

	Istim_updator0 : PROCESS (CLK100)
	BEGIN
		IF (rising_edge(CLK100)) THEN
			IF (clk1k = '1') THEN
				IF (COUNTER_Istim < "1110") THEN
					COUNTER_Istim <= COUNTER_Istim + 1;
				ELSE
					cIstim_temp0 <= cIstim1;
				END IF;
			END IF;
		END IF;
	END PROCESS;

	Istim_updator1 : PROCESS (CLK100)
	BEGIN
		IF (rising_edge(CLK100)) THEN
			IF (clk1 = '1') THEN
				IF (COUNTER_Istim1 < "0010") THEN
					COUNTER_Istim1 <= COUNTER_Istim1 + 1;
				ELSE
					IF (cIstim_temp1 = cIstim1) THEN
						cIstim_temp1 <= ZERO18;
					ELSE
						cIstim_temp1 <= cIstim1;
					END IF;
					COUNTER_Istim1 <= "0000";
				END IF;
			END IF;
		END IF;
	END PROCESS;

	Istim_switch : PROCESS (CLK100)
	BEGIN
		IF (rising_edge(CLK100)) THEN
			CASE STATE_Istim_switch IS
				WHEN READY => 
					Istim_switched <= ZERO18;
					IF (clk1 = '1') THEN
						IF (COUNTER_Istim_switch < "1010") THEN
							COUNTER_Istim_switch <= COUNTER_Istim_switch + 1;
						ELSE
							STATE_Istim_switch <= CONNECTED;
						END IF;
					END IF;
				WHEN CONNECTED => 
					Istim_switched <= Istim;--cIstim_temp;
			END CASE;
		END IF;
	END PROCESS;

	dssn_id_measuring : PROCESS (CLK100)
	BEGIN
		IF (rising_edge(CLK100)) THEN
			IF (PORT_UART_RX_PACKET_COUPLE_DONE = '1' AND PORT_UART_DATA_COUPLED >= ORN_addra_MAX) THEN
				dssn_id_for_measuring <= PORT_UART_DATA_COUPLED - ORN_addra_MAX;
			END IF;
		END IF;
	END PROCESS;

	homeostasis_updator1 : PROCESS (CLK100)
	BEGIN
		IF (rising_edge(CLK100)) THEN
			CASE STATE_homeostasis IS
				WHEN READY => 
					homeostasis_flag0 <= "0";
					IF (PORT_UART_DATA_COUPLED = UART_DATA_HSTART + ORN_addra_MAX AND PORT_UART_RX_PACKET_COUPLE_DONE = '1') THEN
						STATE_homeostasis <= ACTIVE;
					END IF;
				WHEN ACTIVE => 
					homeostasis_flag0 <= "1";
					IF (PORT_UART_DATA_COUPLED = UART_DATA_HEND + ORN_addra_MAX AND PORT_UART_RX_PACKET_COUPLE_DONE = '1') THEN
						STATE_homeostasis <= READY;
					END IF;
			END CASE;
		END IF;
	END PROCESS;

	EshockToDssnid : PROCESS (CLK100)
	BEGIN
		IF (rising_edge(CLK100)) THEN
			IF (EshockToDssnid_flag1 = "1") THEN
				EshockToDssnid_flag0 <= "0";
			ELSE
				IF (PORT_UART_DATA_COUPLED = UART_DATA_ESHOCK + ORN_addra_MAX AND PORT_UART_RX_PACKET_COUPLE_DONE = '1') THEN
					EshockToDssnid_flag0 <= "1";
				END IF;
			END IF;
		END IF;
	END PROCESS;

	Port_controller : PROCESS (CLK100)
	BEGIN
		IF (rising_edge(CLK100)) THEN
			mem_v_addra <= mem_addra;
			mem_n_addra <= mem_addra;
			mem_q_addra <= mem_addra;
			mem_u_addra <= mem_addra;
			mem_fc_addra <= mem_addra;
			IF (mem_addra < mem_addra_PN_MAX) THEN
				PORT_mem_LNPN_I_addrb <= mem_addra(8 DOWNTO 0);
				PORT_mem_LNPN_I_inhi_addrb <= mem_addra(8 DOWNTO 0);
				PORT_mem_LNPN_sc_addra <= mem_addra(8 DOWNTO 0);
			END IF;
			IF (mem_addra >= mem_addra_PN_MAX AND mem_addra < mem_addra_KC_MAX) THEN
				mem_KC_addra <= mem_addra - mem_addra_PN_MAX;
			END IF;
			PORT_mem_KC_I_addrb <= mem_KC_addra(10 DOWNTO 0);
			PORT_mem_KC_sc_addra <= mem_KC_addra(10 DOWNTO 0);
			PORT_mem_KC_sr_addra <= mem_KC_addra(10 DOWNTO 0);
			PORT_mem_APL_sc <= mem_APL_sc;
			PORT_mem_MBON0_sc <= mem_MBON0_sc;
			PORT_mem_MBON1_sc <= mem_MBON1_sc;
			PORT_mem_CREPINE_sc <= mem_CREPINE_sc;

		END IF;
	END PROCESS;

	Iin_ctr_for_PQNtest : PROCESS (CLK100)
	BEGIN
		IF (rising_edge(CLK100)) THEN
			CASE STATE_Iin IS
				WHEN READY => 
					DSSN_Krasavietz_class1_Iin <= (OTHERS => '0');
					DSSN_Krasavietz_class2_Iin <= (OTHERS => '0');
					DSSN_NP1227_class1_Iin <= (OTHERS => '0');
					DSSN_NP2426_class1_Iin <= (OTHERS => '0');
					IF (PORT_UART_DATA_COUPLED = UART_DATA_HSTART + ORN_addra_MAX AND PORT_UART_RX_PACKET_COUPLE_DONE = '1') THEN
						STATE_Iin <= Ion0;
						Iin_counter0 <= (OTHERS => '0');
					END IF;
				WHEN Ion0 => 
					DSSN_Krasavietz_class1_Iin <= I00;
					DSSN_Krasavietz_class2_Iin <= I10;
					DSSN_NP1227_class1_Iin <= I20;
					DSSN_NP2426_class1_Iin <= I30;
					IF (Iin_counter0 = 300000000 - 1) THEN
						STATE_Iin <= Ioff0;
						Iin_counter0 <= (OTHERS => '0');
					ELSE
						Iin_counter0 <= Iin_counter0 + 1;
					END IF;
				WHEN Ioff0 => 
					DSSN_Krasavietz_class1_Iin <= (OTHERS => '0');
					DSSN_Krasavietz_class2_Iin <= (OTHERS => '0');
					DSSN_NP1227_class1_Iin <= (OTHERS => '0');
					DSSN_NP2426_class1_Iin <= (OTHERS => '0');
					IF (Iin_counter0 = 500000000 - 1) THEN
						STATE_Iin <= Ion1;
						Iin_counter0 <= (OTHERS => '0');
					ELSE
						Iin_counter0 <= Iin_counter0 + 1;
					END IF;
				WHEN Ion1 => 
					DSSN_Krasavietz_class1_Iin <= I01;
					DSSN_Krasavietz_class2_Iin <= I11;
					DSSN_NP1227_class1_Iin <= I21;
					DSSN_NP2426_class1_Iin <= I31;
					IF (Iin_counter0 = 300000000 - 1) THEN
						STATE_Iin <= Ioff1;
						Iin_counter0 <= (OTHERS => '0');
					ELSE
						Iin_counter0 <= Iin_counter0 + 1;
					END IF;
				WHEN Ioff1 => 
					DSSN_Krasavietz_class1_Iin <= (OTHERS => '0');
					DSSN_Krasavietz_class2_Iin <= (OTHERS => '0');
					DSSN_NP1227_class1_Iin <= (OTHERS => '0');
					DSSN_NP2426_class1_Iin <= (OTHERS => '0');
					IF (Iin_counter0 = 500000000 - 1) THEN
						STATE_Iin <= Ion2;
						Iin_counter0 <= (OTHERS => '0');
					ELSE
						Iin_counter0 <= Iin_counter0 + 1;
					END IF;
				WHEN Ion2 => 
					DSSN_Krasavietz_class1_Iin <= I02;
					DSSN_Krasavietz_class2_Iin <= I12;
					DSSN_NP1227_class1_Iin <= I22;
					DSSN_NP2426_class1_Iin <= I32;
					IF (Iin_counter0 = 300000000 - 1) THEN
						STATE_Iin <= Ioff2;
						Iin_counter0 <= (OTHERS => '0');
					ELSE
						Iin_counter0 <= Iin_counter0 + 1;
					END IF;
				WHEN Ioff2 => 
					DSSN_Krasavietz_class1_Iin <= (OTHERS => '0');
					DSSN_Krasavietz_class2_Iin <= (OTHERS => '0');
					DSSN_NP1227_class1_Iin <= (OTHERS => '0');
					DSSN_NP2426_class1_Iin <= (OTHERS => '0');
					IF (Iin_counter0 = 500000000 - 1) THEN
						STATE_Iin <= Ion3;
						Iin_counter0 <= (OTHERS => '0');
					ELSE
						Iin_counter0 <= Iin_counter0 + 1;
					END IF;
				WHEN Ion3 => 
					DSSN_Krasavietz_class1_Iin <= I03;
					DSSN_Krasavietz_class2_Iin <= I13;
					DSSN_NP1227_class1_Iin <= I23;
					DSSN_NP2426_class1_Iin <= I33;
					IF (Iin_counter0 = 300000000 - 1) THEN
						STATE_Iin <= Ioff3;
						Iin_counter0 <= (OTHERS => '0');
					ELSE
						Iin_counter0 <= Iin_counter0 + 1;
					END IF;
				WHEN Ioff3 => 
					DSSN_Krasavietz_class1_Iin <= (OTHERS => '0');
					DSSN_Krasavietz_class2_Iin <= (OTHERS => '0');
					DSSN_NP1227_class1_Iin <= (OTHERS => '0');
					DSSN_NP2426_class1_Iin <= (OTHERS => '0');
					IF (Iin_counter0 = 500000000 - 1) THEN
						STATE_Iin <= Ion4;
						Iin_counter0 <= (OTHERS => '0');
					ELSE
						Iin_counter0 <= Iin_counter0 + 1;
					END IF;
				WHEN Ion4 => 
					DSSN_Krasavietz_class1_Iin <= I04;
					DSSN_Krasavietz_class2_Iin <= I14;
					DSSN_NP1227_class1_Iin <= I24;
					DSSN_NP2426_class1_Iin <= I34;
					IF (Iin_counter0 = 300000000 - 1) THEN
						STATE_Iin <= Ioff4;
						Iin_counter0 <= (OTHERS => '0');
					ELSE
						Iin_counter0 <= Iin_counter0 + 1;
					END IF;
				WHEN Ioff4 => 
					DSSN_Krasavietz_class1_Iin <= (OTHERS => '0');
					DSSN_Krasavietz_class2_Iin <= (OTHERS => '0');
					DSSN_NP1227_class1_Iin <= (OTHERS => '0');
					DSSN_NP2426_class1_Iin <= (OTHERS => '0');
					IF (Iin_counter0 = 500000000 - 1) THEN
						STATE_Iin <= Ion5;
						Iin_counter0 <= (OTHERS => '0');
					ELSE
						Iin_counter0 <= Iin_counter0 + 1;
					END IF;
				WHEN Ion5 => 
					DSSN_Krasavietz_class1_Iin <= I05;
					DSSN_Krasavietz_class2_Iin <= I15;
					DSSN_NP1227_class1_Iin <= I25;
					DSSN_NP2426_class1_Iin <= I35;
					IF (Iin_counter0 = 300000000 - 1) THEN
						STATE_Iin <= Ioff5;
						Iin_counter0 <= (OTHERS => '0');
					ELSE
						Iin_counter0 <= Iin_counter0 + 1;
					END IF;
				WHEN Ioff5 => 
					DSSN_Krasavietz_class1_Iin <= (OTHERS => '0');
					DSSN_Krasavietz_class2_Iin <= (OTHERS => '0');
					DSSN_NP1227_class1_Iin <= (OTHERS => '0');
					DSSN_NP2426_class1_Iin <= (OTHERS => '0');
					IF (Iin_counter0 = 500000000 - 1) THEN
						STATE_Iin <= Ion6;
						Iin_counter0 <= (OTHERS => '0');
					ELSE
						Iin_counter0 <= Iin_counter0 + 1;
					END IF;
				WHEN Ion6 => 
					DSSN_Krasavietz_class1_Iin <= I06;
					DSSN_Krasavietz_class2_Iin <= I16;
					DSSN_NP1227_class1_Iin <= I26;
					DSSN_NP2426_class1_Iin <= I36;
					IF (Iin_counter0 = 300000000 - 1) THEN
						STATE_Iin <= Ioff6;
						Iin_counter0 <= (OTHERS => '0');
					ELSE
						Iin_counter0 <= Iin_counter0 + 1;
					END IF;
				WHEN Ioff6 => 
					DSSN_Krasavietz_class1_Iin <= (OTHERS => '0');
					DSSN_Krasavietz_class2_Iin <= (OTHERS => '0');
					DSSN_NP1227_class1_Iin <= (OTHERS => '0');
					DSSN_NP2426_class1_Iin <= (OTHERS => '0');
					IF (Iin_counter0 = 500000000 - 1) THEN
						STATE_Iin <= Ion7;
						Iin_counter0 <= (OTHERS => '0');
					ELSE
						Iin_counter0 <= Iin_counter0 + 1;
					END IF;
				WHEN Ion7 => 
					DSSN_Krasavietz_class1_Iin <= I07;
					DSSN_Krasavietz_class2_Iin <= I17;
					DSSN_NP1227_class1_Iin <= I27;
					DSSN_NP2426_class1_Iin <= I37;
					IF (Iin_counter0 = 300000000 - 1) THEN
						STATE_Iin <= Ioff7;
						Iin_counter0 <= (OTHERS => '0');
					ELSE
						Iin_counter0 <= Iin_counter0 + 1;
					END IF;
				WHEN Ioff7 => 
					DSSN_Krasavietz_class1_Iin <= (OTHERS => '0');
					DSSN_Krasavietz_class2_Iin <= (OTHERS => '0');
					DSSN_NP1227_class1_Iin <= (OTHERS => '0');
					DSSN_NP2426_class1_Iin <= (OTHERS => '0');
					IF (Iin_counter0 = 500000000 - 1) THEN
						STATE_Iin <= Ion0;
						Iin_counter0 <= (OTHERS => '0');
					ELSE
						Iin_counter0 <= Iin_counter0 + 1;
					END IF;
			END CASE;
		END IF;
	END PROCESS;
	Iin1_ctr_for_PQNtest : PROCESS (CLK100)
	BEGIN
		IF (rising_edge(CLK100)) THEN
			CASE STATE_Iin1 IS
				WHEN READY => 
					DSSN_PN_Iin <= (OTHERS => '0');
					DSSN_KC_Iin <= (OTHERS => '0');
					DSSN_APL_Iin <= (OTHERS => '0');
					IF (PORT_UART_DATA_COUPLED = UART_DATA_HSTART + ORN_addra_MAX AND PORT_UART_RX_PACKET_COUPLE_DONE = '1') THEN
						STATE_Iin1 <= Ion0;
						Iin_counter1 <= (OTHERS => '0');
					END IF;
				WHEN Ion0 => 
					DSSN_PN_Iin <= I40;
					DSSN_KC_Iin <= I50;
					DSSN_APL_Iin <= I70;
					IF (Iin_counter1 = 50000000 - 1) THEN
						STATE_Iin1 <= Ioff0;
						Iin_counter1 <= (OTHERS => '0');
					ELSE
						Iin_counter1 <= Iin_counter1 + 1;
					END IF;
				WHEN Ioff0 => 
					DSSN_PN_Iin <= (OTHERS => '0');
					DSSN_KC_Iin <= (OTHERS => '0');
					DSSN_APL_Iin <= (OTHERS => '0');
					IF (Iin_counter1 = 750000000 - 1) THEN
						STATE_Iin1 <= Ion1;
						Iin_counter1 <= (OTHERS => '0');
					ELSE
						Iin_counter1 <= Iin_counter1 + 1;
					END IF;
				WHEN Ion1 => 
					DSSN_PN_Iin <= I41;
					DSSN_KC_Iin <= I51;
					DSSN_APL_Iin <= I71;
					IF (Iin_counter1 = 50000000 - 1) THEN
						STATE_Iin1 <= Ioff1;
						Iin_counter1 <= (OTHERS => '0');
					ELSE
						Iin_counter1 <= Iin_counter1 + 1;
					END IF;
				WHEN Ioff1 => 
					DSSN_PN_Iin <= (OTHERS => '0');
					DSSN_KC_Iin <= (OTHERS => '0');
					DSSN_APL_Iin <= (OTHERS => '0');
					IF (Iin_counter1 = 750000000 - 1) THEN
						STATE_Iin1 <= Ion2;
						Iin_counter1 <= (OTHERS => '0');
					ELSE
						Iin_counter1 <= Iin_counter1 + 1;
					END IF;
				WHEN Ion2 => 
					DSSN_PN_Iin <= I42;
					DSSN_KC_Iin <= I52;
					DSSN_APL_Iin <= I72;
					IF (Iin_counter1 = 50000000 - 1) THEN
						STATE_Iin1 <= Ioff2;
						Iin_counter1 <= (OTHERS => '0');
					ELSE
						Iin_counter1 <= Iin_counter1 + 1;
					END IF;
				WHEN Ioff2 => 
					DSSN_PN_Iin <= (OTHERS => '0');
					DSSN_KC_Iin <= (OTHERS => '0');
					DSSN_APL_Iin <= (OTHERS => '0');
					IF (Iin_counter1 = 750000000 - 1) THEN
						STATE_Iin1 <= Ion3;
						Iin_counter1 <= (OTHERS => '0');
					ELSE
						Iin_counter1 <= Iin_counter1 + 1;
					END IF;
				WHEN Ion3 => 
					DSSN_PN_Iin <= I43;
					DSSN_KC_Iin <= I53;
					DSSN_APL_Iin <= I70;
					IF (Iin_counter1 = 50000000 - 1) THEN
						STATE_Iin1 <= Ioff3;
						Iin_counter1 <= (OTHERS => '0');
					ELSE
						Iin_counter1 <= Iin_counter1 + 1;
					END IF;
				WHEN Ioff3 => 
					DSSN_PN_Iin <= (OTHERS => '0');
					DSSN_KC_Iin <= (OTHERS => '0');
					DSSN_APL_Iin <= (OTHERS => '0');
					IF (Iin_counter1 = 750000000 - 1) THEN
						STATE_Iin1 <= Ion4;
						Iin_counter1 <= (OTHERS => '0');
					ELSE
						Iin_counter1 <= Iin_counter1 + 1;
					END IF;
				WHEN Ion4 => 
					DSSN_PN_Iin <= I44;
					DSSN_KC_Iin <= I54;
					DSSN_APL_Iin <= I71;
					IF (Iin_counter1 = 50000000 - 1) THEN
						STATE_Iin1 <= Ioff4;
						Iin_counter1 <= (OTHERS => '0');
					ELSE
						Iin_counter1 <= Iin_counter1 + 1;
					END IF;
				WHEN Ioff4 => 
					DSSN_PN_Iin <= (OTHERS => '0');
					DSSN_KC_Iin <= (OTHERS => '0');
					DSSN_APL_Iin <= (OTHERS => '0');
					IF (Iin_counter1 = 750000000 - 1) THEN
						STATE_Iin1 <= Ion5;
						Iin_counter1 <= (OTHERS => '0');
					ELSE
						Iin_counter1 <= Iin_counter1 + 1;
					END IF;
				WHEN Ion5 => 
					DSSN_PN_Iin <= I45;
					DSSN_KC_Iin <= I55;
					DSSN_APL_Iin <= I72;
					IF (Iin_counter1 = 50000000 - 1) THEN
						STATE_Iin1 <= Ioff5;
						Iin_counter1 <= (OTHERS => '0');
					ELSE
						Iin_counter1 <= Iin_counter1 + 1;
					END IF;
				WHEN Ioff5 => 
					DSSN_PN_Iin <= (OTHERS => '0');
					DSSN_KC_Iin <= (OTHERS => '0');
					DSSN_APL_Iin <= (OTHERS => '0');
					IF (Iin_counter1 = 750000000 - 1) THEN
						STATE_Iin1 <= Ion6;
						Iin_counter1 <= (OTHERS => '0');
					ELSE
						Iin_counter1 <= Iin_counter1 + 1;
					END IF;
				WHEN Ion6 => 
					DSSN_PN_Iin <= I46;
					DSSN_KC_Iin <= I56;
					DSSN_APL_Iin <= I72;
					IF (Iin_counter1 = 50000000 - 1) THEN
						STATE_Iin1 <= Ioff6;
						Iin_counter1 <= (OTHERS => '0');
					ELSE
						Iin_counter1 <= Iin_counter1 + 1;
					END IF;
				WHEN Ioff6 => 
					DSSN_PN_Iin <= (OTHERS => '0');
					DSSN_KC_Iin <= (OTHERS => '0');
					DSSN_APL_Iin <= (OTHERS => '0');
					IF (Iin_counter1 = 750000000 - 1) THEN
						STATE_Iin1 <= Ion7;
						Iin_counter1 <= (OTHERS => '0');
					ELSE
						Iin_counter1 <= Iin_counter1 + 1;
					END IF;
				WHEN Ion7 => 
					DSSN_PN_Iin <= I47;
					DSSN_KC_Iin <= I57;
					DSSN_APL_Iin <= I72;
					IF (Iin_counter1 = 50000000 - 1) THEN
						STATE_Iin1 <= Ioff7;
						Iin_counter1 <= (OTHERS => '0');
					ELSE
						Iin_counter1 <= Iin_counter1 + 1;
					END IF;
				WHEN Ioff7 => 
					DSSN_PN_Iin <= (OTHERS => '0');
					DSSN_KC_Iin <= (OTHERS => '0');
					DSSN_APL_Iin <= (OTHERS => '0');
					IF (Iin_counter1 = 750000000 - 1) THEN
						STATE_Iin1 <= Ion0;
						Iin_counter1 <= (OTHERS => '0');
					ELSE
						Iin_counter1 <= Iin_counter1 + 1;
					END IF;
			END CASE;
		END IF;
	END PROCESS;

	Iin2_ctr_for_PQNtest : PROCESS (CLK100)
	BEGIN
		IF (rising_edge(CLK100)) THEN
			CASE STATE_Iin2 IS
				WHEN READY => 
					DSSN_MBON_Iin <= (OTHERS => '0');
					DSSN_CREPINE_Iin <= (OTHERS => '0');
					IF (PORT_UART_DATA_COUPLED = UART_DATA_HSTART + ORN_addra_MAX AND PORT_UART_RX_PACKET_COUPLE_DONE = '1') THEN
						STATE_Iin2 <= Ion0;
						Iin_counter2 <= (OTHERS => '0');
					END IF;
				WHEN Ion0 => 
					DSSN_MBON_Iin <= I60;
					DSSN_CREPINE_Iin <= I80;
					IF (Iin_counter2 = 100000000 - 1) THEN
						STATE_Iin2 <= Ioff0;
						Iin_counter2 <= (OTHERS => '0');
					ELSE
						Iin_counter2 <= Iin_counter2 + 1;
					END IF;
				WHEN Ioff0 => 
					DSSN_MBON_Iin <= (OTHERS => '0');
					DSSN_CREPINE_Iin <= (OTHERS => '0');
					IF (Iin_counter2 = 700000000 - 1) THEN
						STATE_Iin2 <= Ion1;
						Iin_counter2 <= (OTHERS => '0');
					ELSE
						Iin_counter2 <= Iin_counter2 + 1;
					END IF;
				WHEN Ion1 => 
					DSSN_MBON_Iin <= I61;
					DSSN_CREPINE_Iin <= I81;
					IF (Iin_counter2 = 100000000 - 1) THEN
						STATE_Iin2 <= Ioff1;
						Iin_counter2 <= (OTHERS => '0');
					ELSE
						Iin_counter2 <= Iin_counter2 + 1;
					END IF;
				WHEN Ioff1 => 
					DSSN_MBON_Iin <= (OTHERS => '0');
					DSSN_CREPINE_Iin <= (OTHERS => '0');
					IF (Iin_counter2 = 700000000 - 1) THEN
						STATE_Iin2 <= Ion2;
						Iin_counter2 <= (OTHERS => '0');
					ELSE
						Iin_counter2 <= Iin_counter2 + 1;
					END IF;
				WHEN Ion2 => 
					DSSN_MBON_Iin <= I62;
					DSSN_CREPINE_Iin <= I82;
					IF (Iin_counter2 = 100000000 - 1) THEN
						STATE_Iin2 <= Ioff2;
						Iin_counter2 <= (OTHERS => '0');
					ELSE
						Iin_counter2 <= Iin_counter2 + 1;
					END IF;
				WHEN Ioff2 => 
					DSSN_MBON_Iin <= (OTHERS => '0');
					DSSN_CREPINE_Iin <= (OTHERS => '0');
					IF (Iin_counter2 = 700000000 - 1) THEN
						STATE_Iin2 <= Ion3;
						Iin_counter2 <= (OTHERS => '0');
					ELSE
						Iin_counter2 <= Iin_counter2 + 1;
					END IF;
				WHEN Ion3 => 
                        DSSN_MBON_Iin <= I63;
                        DSSN_CREPINE_Iin <= I82;
                        IF (Iin_counter2 = 100000000 - 1) THEN
                            STATE_Iin2 <= Ioff3;
                            Iin_counter2 <= (OTHERS => '0');
                        ELSE
                            Iin_counter2 <= Iin_counter2 + 1;
                        END IF;
                    WHEN Ioff3 => 
                        DSSN_MBON_Iin <= (OTHERS => '0');
                        DSSN_CREPINE_Iin <= (OTHERS => '0');
                        IF (Iin_counter2 = 700000000 - 1) THEN
                            STATE_Iin2 <= Ion4;
                            Iin_counter2 <= (OTHERS => '0');
                        ELSE
                            Iin_counter2 <= Iin_counter2 + 1;
                        END IF;
				WHEN Ion4 => 
                            DSSN_MBON_Iin <= I64;
                            DSSN_CREPINE_Iin <= I82;
                            IF (Iin_counter2 = 100000000 - 1) THEN
                                STATE_Iin2 <= Ioff4;
                                Iin_counter2 <= (OTHERS => '0');
                            ELSE
                                Iin_counter2 <= Iin_counter2 + 1;
                            END IF;
                        WHEN Ioff4 => 
                            DSSN_MBON_Iin <= (OTHERS => '0');
                            DSSN_CREPINE_Iin <= (OTHERS => '0');
                            IF (Iin_counter2 = 700000000 - 1) THEN
                                STATE_Iin2 <= Ion0;
                                Iin_counter2 <= (OTHERS => '0');
                            ELSE
                                Iin_counter2 <= Iin_counter2 + 1;
                            END IF;
			END CASE;
		END IF;
	END PROCESS;

	dssn_updater : PROCESS (CLK100)
	BEGIN
		IF (rising_edge(CLK100)) THEN
			CASE STATE IS
				WHEN READY => 

					IF (clk1k = '1') THEN
						STATE <= UPDATING0;
						COUNTER3 <= "0000";
						mem_addra <= ZERO12;
						dssn_id_tx_counter <= (OTHERS => '0');
						spike_counter_0 <= (OTHERS => '0');
						PN_u_sum <= (OTHERS => '0');
						PN_v_sum <= (OTHERS => '0');
						KC_v_sum <= (OTHERS => '0');
						LN_v_sum <= (OTHERS => '0');
					END IF;
				WHEN UPDATING0 => 
					EshockToDssnid_flag1 <= "0";
					IF (mem_addra < mem_addra_CREPINE_MAX) THEN
						IF (COUNTER3 < "0111") THEN
							COUNTER3 <= COUNTER3 + 1;
							PORT_dssn_glomeruli_wr_en <= '0';
						ELSIF (COUNTER3 = "0111") THEN
							IF (mem_addra < mem_addra_LN0_MAX) THEN
								DSSN_Krasavietz_class1_vin <= mem_v_douta;
								DSSN_Krasavietz_class1_nin <= mem_n_douta;
								DSSN_Krasavietz_class1_qin <= mem_q_douta;
								DSSN_Krasavietz_class1_fcin <= mem_fc_douta;
								DSSN_Krasavietz_class1_sin <= PORT_mem_LNPN_sc_douta;
							ELSIF (mem_addra < mem_addra_LN1_MAX) THEN
								DSSN_Krasavietz_class2_vin <= mem_v_douta;
								DSSN_Krasavietz_class2_nin <= mem_n_douta;
								DSSN_Krasavietz_class2_qin <= mem_q_douta;
								DSSN_Krasavietz_class2_fcin <= mem_fc_douta;
								DSSN_Krasavietz_class2_sin <= PORT_mem_LNPN_sc_douta;
							ELSIF (mem_addra < mem_addra_LN2_MAX) THEN
								DSSN_NP1227_class1_vin <= mem_v_douta;
								DSSN_NP1227_class1_nin <= mem_n_douta;
								DSSN_NP1227_class1_qin <= mem_q_douta;
								DSSN_NP1227_class1_fcin <= mem_fc_douta;
								DSSN_NP1227_class1_sin <= PORT_mem_LNPN_sc_douta;
							ELSIF (mem_addra < mem_addra_LN3_MAX) THEN
								DSSN_NP2426_class1_vin <= mem_v_douta;
								DSSN_NP2426_class1_nin <= mem_n_douta;
								DSSN_NP2426_class1_qin <= mem_q_douta;
								DSSN_NP2426_class1_fcin <= mem_fc_douta;
								DSSN_NP2426_class1_sin <= PORT_mem_LNPN_sc_douta;
							ELSIF (mem_addra < mem_addra_PN_MAX) THEN
								DSSN_PN_vin <= mem_v_douta;
								DSSN_PN_nin <= mem_n_douta;
								DSSN_PN_qin <= mem_q_douta;
								DSSN_PN_uin <= "000000011100000000";
								DSSN_PN_fcin <= mem_fc_douta;
								DSSN_PN_sin <= PORT_mem_LNPN_sc_douta;
								ELSIF (mem_addra < mem_addra_KC_MAX) THEN
								DSSN_KC_vin <= mem_v_douta;
								DSSN_KC_nin <= mem_n_douta;
								DSSN_KC_qin <= mem_q_douta;
								DSSN_KC_uin <= "000000011000000100";
								DSSN_KC_fcin <= mem_fc_douta;
								DSSN_KC_sin <= PORT_mem_KC_sc_douta;
							ELSIF (mem_addra < mem_addra_APL_MAX) THEN
								DSSN_APL_vin <= mem_v_douta;
								DSSN_APL_nin <= mem_n_douta;
								DSSN_APL_qin <= mem_q_douta;
								DSSN_APL_sin <= mem_APL_sc;
							ELSIF (mem_addra < mem_addra_MBON0_MAX) THEN
								DSSN_MBON_vin <= mem_v_douta;
								DSSN_MBON_nin <= mem_n_douta;
								DSSN_MBON_qin <= mem_q_douta;
								DSSN_MBON_sin <= mem_MBON0_sc;
								DSSN_MBON_fcin <= mem_fc_douta;
							ELSIF (mem_addra < mem_addra_MBON1_MAX) THEN
								DSSN_MBON_vin <= mem_v_douta;
								DSSN_MBON_nin <= mem_n_douta;
								DSSN_MBON_qin <= mem_q_douta;
								DSSN_MBON_sin <= mem_MBON1_sc;
								DSSN_MBON_fcin <= mem_fc_douta;
							ELSE
								DSSN_CREPINE_vin <= mem_v_douta;
								DSSN_CREPINE_nin <= mem_n_douta;
								DSSN_CREPINE_qin <= mem_q_douta;
								DSSN_CREPINE_sin <= mem_CREPINE_sc;
							END IF;
							COUNTER3 <= COUNTER3 + 1;
						ELSIF (COUNTER3 < "1101") THEN
							COUNTER3 <= COUNTER3 + 1;
						ELSIF (COUNTER3 = "1101") THEN
							mem_v_wea <= "1";
							mem_n_wea <= "1";
							mem_q_wea <= "1";
							mem_fc_wea <= "1";
							IF (mem_addra < mem_addra_LN0_MAX) THEN
								mem_v_dina <= DSSN_Krasavietz_class1_vout;
								mem_n_dina <= DSSN_Krasavietz_class1_nout;
								mem_q_dina <= DSSN_Krasavietz_class1_qout;
							ELSIF (mem_addra < mem_addra_LN1_MAX) THEN
								mem_v_dina <= DSSN_Krasavietz_class2_vout;
								mem_n_dina <= DSSN_Krasavietz_class2_nout;
								mem_q_dina <= DSSN_Krasavietz_class2_qout;
							ELSIF (mem_addra < mem_addra_LN2_MAX) THEN
								mem_v_dina <= DSSN_NP1227_class1_vout;
								mem_n_dina <= DSSN_NP1227_class1_nout;
								mem_q_dina <= DSSN_NP1227_class1_qout;
							ELSIF (mem_addra < mem_addra_LN3_MAX) THEN
								mem_v_dina <= DSSN_NP2426_class1_vout;
								mem_n_dina <= DSSN_NP2426_class1_nout;
								mem_q_dina <= DSSN_NP2426_class1_qout;
							ELSIF (mem_addra < mem_addra_PN_MAX) THEN
								mem_v_dina <= DSSN_PN_vout;
								mem_n_dina <= DSSN_PN_nout;
								mem_q_dina <= DSSN_PN_qout;
							ELSIF (mem_addra < mem_addra_KC_MAX) THEN
								mem_v_dina <= DSSN_KC_vout;
								mem_n_dina <= DSSN_KC_nout;
								mem_q_dina <= DSSN_KC_qout;
							ELSIF (mem_addra < mem_addra_APL_MAX) THEN
								mem_v_dina <= DSSN_APL_vout;
								mem_n_dina <= DSSN_APL_nout;
								mem_q_dina <= DSSN_APL_qout;
								mem_APL_sc <= DSSN_APL_sout;
							ELSIF (mem_addra < mem_addra_MBON0_MAX) THEN
								mem_v_dina <= DSSN_MBON_vout;
								mem_n_dina <= DSSN_MBON_nout;
								mem_q_dina <= DSSN_MBON_qout;
							ELSIF (mem_addra < mem_addra_MBON1_MAX) THEN
								mem_v_dina <= DSSN_MBON_vout;
								mem_n_dina <= DSSN_MBON_nout;
								mem_q_dina <= DSSN_MBON_qout;
								mem_MBON1_sc <= DSSN_MBON_sout;
							ELSIF (mem_addra < mem_addra_CREPINE_MAX) THEN
								mem_v_dina <= DSSN_CREPINE_vout;
								mem_n_dina <= DSSN_CREPINE_nout;
								mem_q_dina <= DSSN_CREPINE_qout;
								mem_CREPINE_sc <= DSSN_CREPINE_sout;
								dssn_spike_flag <= DSSN_CREPINE_spike_flag;
							END IF;
							COUNTER3 <= COUNTER3 + 1;
						ELSIF (COUNTER3 = "1110") THEN
							mem_v_wea <= "0";
							mem_n_wea <= "0";
							mem_q_wea <= "0";
							mem_u_wea <= "0";
							mem_fc_wea <= "0";
							IF (mem_addra = mem_addra_LN0_MAX - 1) THEN
								PORT_LN0_for_measuring <= mem_v_dina;
							END IF;
							IF (mem_addra = mem_addra_LN1_MAX - 1) THEN
								PORT_LN1_for_measuring <= mem_v_dina;
							END IF;
							IF (mem_addra = mem_addra_LN2_MAX - 1) THEN
								PORT_LN2_for_measuring <= mem_v_dina;
							END IF;
							IF (mem_addra = mem_addra_LN3_MAX - 1) THEN
								PORT_LN3_for_measuring <= mem_v_dina;
							END IF;
							IF (mem_addra = mem_addra_PN_MAX - 1) THEN
								PORT_PN_for_measuring <= mem_q_dina;
							END IF;
							IF (mem_addra = mem_addra_KC_MAX - 1) THEN
								PORT_KC_for_measuring <= mem_q_dina;
							END IF;
							IF (mem_addra = mem_addra_MBON0_MAX - 1) THEN
								PORT_MBON_for_measuring <= mem_q_dina;
							END IF;
							IF (mem_addra = mem_addra_APL_MAX - 1) THEN
								PORT_APL_for_measuring <= mem_v_dina;
							END IF;
							IF (mem_addra = mem_addra_CREPINE_MAX - 1) THEN
								PORT_CREPINE_for_measuring <= mem_v_dina;
							END IF;

							COUNTER3 <= COUNTER3 + 1;
						ELSE
							PORT_dssn_glomeruli_wr_en <= '0';
							PORT_mem_KC_sr_wea <= "0";
							mem_addra <= mem_addra + 1;
							COUNTER3 <= "0000";
						END IF;
					ELSE
						STATE <= UPDATING_END;
					END IF;
				WHEN UPDATING_END => 
					mem_addra <= ZERO12;
					STATE <= READY;--UPDATING0;
				WHEN OTHERS => 
					STATE <= READY;
			END CASE;
		END IF;
	END PROCESS;

	DSSN_Krasavietz_class1_0 : DSSN_Krasavietz_class1
	PORT MAP(
		clk => clk100, 
		PORT_Iin => DSSN_Krasavietz_class1_Iin, 
		PORT_vin => DSSN_Krasavietz_class1_vin, 
		PORT_nin => DSSN_Krasavietz_class1_nin, 
		PORT_qin => DSSN_Krasavietz_class1_qin, 
		PORT_sin => DSSN_Krasavietz_class1_sin, 
		PORT_uin => DSSN_Krasavietz_class1_uin, 
		PORT_fcin => DSSN_Krasavietz_class1_fcin, 
		PORT_vout => DSSN_Krasavietz_class1_vout, 
		PORT_nout => DSSN_Krasavietz_class1_nout, 
		PORT_qout => DSSN_Krasavietz_class1_qout, 
		PORT_sout => DSSN_Krasavietz_class1_sout, 
		PORT_uout => DSSN_Krasavietz_class1_uout, 
		PORT_fcout => DSSN_Krasavietz_class1_fcout, 
		PORT_spike_flag => DSSN_Krasavietz_class1_spike_flag
		);
		DSSN_Krasavietz_class2_0 : DSSN_Krasavietz_class2
		PORT MAP(
			--DSSN_Krasavietz_class2_0 : DSSN_Krasavietz_class1 PORT MAP(
			clk => clk100, 
			PORT_Iin => DSSN_Krasavietz_class2_Iin, 
			PORT_vin => DSSN_Krasavietz_class2_vin, 
			PORT_nin => DSSN_Krasavietz_class2_nin, 
			PORT_qin => DSSN_Krasavietz_class2_qin, 
			PORT_sin => DSSN_Krasavietz_class2_sin, 
			PORT_uin => DSSN_Krasavietz_class2_uin, 
			PORT_fcin => DSSN_Krasavietz_class2_fcin, 
			PORT_vout => DSSN_Krasavietz_class2_vout, 
			PORT_nout => DSSN_Krasavietz_class2_nout, 
			PORT_qout => DSSN_Krasavietz_class2_qout, 
			PORT_sout => DSSN_Krasavietz_class2_sout, 
			PORT_uout => DSSN_Krasavietz_class2_uout, 
			PORT_fcout => DSSN_Krasavietz_class2_fcout, 
			PORT_spike_flag => DSSN_Krasavietz_class2_spike_flag
		);
		DSSN_NP1227_class1_0 : DSSN_NP1227_class1
		PORT MAP(
			--DSSN_NP1227_class1_0 : DSSN_Krasavietz_class1 PORT MAP(
			clk => clk100, 
			PORT_Iin => DSSN_NP1227_class1_Iin, 
			PORT_vin => DSSN_NP1227_class1_vin, 
			PORT_nin => DSSN_NP1227_class1_nin, 
			PORT_qin => DSSN_NP1227_class1_qin, 
			PORT_sin => DSSN_NP1227_class1_sin, 
			PORT_uin => DSSN_NP1227_class1_uin, 
			PORT_fcin => DSSN_NP1227_class1_fcin, 
			PORT_vout => DSSN_NP1227_class1_vout, 
			PORT_nout => DSSN_NP1227_class1_nout, 
			PORT_qout => DSSN_NP1227_class1_qout, 
			PORT_sout => DSSN_NP1227_class1_sout, 
			PORT_uout => DSSN_NP1227_class1_uout, 
			PORT_fcout => DSSN_NP1227_class1_fcout, 
			PORT_spike_flag => DSSN_NP1227_class1_spike_flag
		);
		DSSN_NP2426_class1_0 : DSSN_NP2426_class1
		PORT MAP(
			--DSSN_NP2426_class1_0 : DSSN_Krasavietz_class1 PORT MAP(
			clk => clk100, 
			PORT_Iin => DSSN_NP2426_class1_Iin, 
			PORT_vin => DSSN_NP2426_class1_vin, 
			PORT_nin => DSSN_NP2426_class1_nin, 
			PORT_qin => DSSN_NP2426_class1_qin, 
			PORT_sin => DSSN_NP2426_class1_sin, 
			PORT_uin => DSSN_NP2426_class1_uin, 
			PORT_fcin => DSSN_NP2426_class1_fcin, 
			PORT_vout => DSSN_NP2426_class1_vout, 
			PORT_nout => DSSN_NP2426_class1_nout, 
			PORT_qout => DSSN_NP2426_class1_qout, 
			PORT_sout => DSSN_NP2426_class1_sout, 
			PORT_uout => DSSN_NP2426_class1_uout, 
			PORT_fcout => DSSN_NP2426_class1_fcout, 
			PORT_spike_flag => DSSN_NP2426_class1_spike_flag
		);
		DSSN_PN_0 : DSSN_PN
		PORT MAP(
			clk => clk100, 
			PORT_Iin => DSSN_PN_Iin, 
			PORT_vin => DSSN_PN_vin, 
			PORT_nin => DSSN_PN_nin, 
			PORT_qin => DSSN_PN_qin, 
			PORT_sin => DSSN_PN_sin, 
			PORT_uin => DSSN_PN_uin, 
			PORT_fcin => DSSN_PN_fcin, 
			PORT_vout => DSSN_PN_vout, 
			PORT_nout => DSSN_PN_nout, 
			PORT_qout => DSSN_PN_qout, 
			PORT_sout => DSSN_PN_sout, 
			PORT_uout => DSSN_PN_uout, 
			PORT_fcout => DSSN_PN_fcout, 
			PORT_spike_flag => DSSN_PN_spike_flag
		);
		DSSN_KC_0 : DSSN_KC
		PORT MAP(
			clk => clk100, 
			PORT_Iin => DSSN_KC_Iin, 
			PORT_vin => DSSN_KC_vin, 
			PORT_nin => DSSN_KC_nin, 
			PORT_qin => DSSN_KC_qin, 
			PORT_sin => DSSN_KC_sin, 
			PORT_uin => DSSN_KC_uin, 
			PORT_fcin => DSSN_KC_fcin, 
			PORT_vout => DSSN_KC_vout, 
			PORT_nout => DSSN_KC_nout, 
			PORT_qout => DSSN_KC_qout, 
			PORT_sout => DSSN_KC_sout, 
			PORT_uout => DSSN_KC_uout, 
			PORT_fcout => DSSN_KC_fcout, 
			PORT_spike_flag => DSSN_KC_spike_flag
		);
		DSSN_APL_0 : DSSN_APL
		PORT MAP(
			clk => clk100, 
			PORT_Iin => DSSN_APL_Iin, 
			PORT_vin => DSSN_APL_vin, 
			PORT_nin => DSSN_APL_nin, 
			PORT_qin => DSSN_APL_qin, 
			PORT_sin => DSSN_APL_sin, 
			PORT_uin => DSSN_APL_uin, 
			PORT_fcin => DSSN_APL_fcin, 
			PORT_vout => DSSN_APL_vout, 
			PORT_nout => DSSN_APL_nout, 
			PORT_qout => DSSN_APL_qout, 
			PORT_sout => DSSN_APL_sout, 
			PORT_uout => DSSN_APL_uout, 
			PORT_fcout => DSSN_APL_fcout, 
			PORT_spike_flag => DSSN_APL_spike_flag
		);
		DSSN_MBON_0 : DSSN_MBON
		PORT MAP(
			clk => clk100, 
			PORT_Iin => DSSN_MBON_Iin, 
			PORT_vin => DSSN_MBON_vin, 
			PORT_nin => DSSN_MBON_nin, 
			PORT_qin => DSSN_MBON_qin, 
			PORT_sin => DSSN_MBON_sin, 
			PORT_uin => DSSN_MBON_uin, 
			PORT_fcin => DSSN_MBON_fcin, 
			PORT_vout => DSSN_MBON_vout, 
			PORT_nout => DSSN_MBON_nout, 
			PORT_qout => DSSN_MBON_qout, 
			PORT_sout => DSSN_MBON_sout, 
			PORT_uout => DSSN_MBON_uout, 
			PORT_fcout => DSSN_MBON_fcout, 
			PORT_spike_flag => DSSN_MBON_spike_flag
		);
		DSSN_CREPINE_0 : DSSN_CREPINE
		PORT MAP(
			clk => clk100, 
			PORT_Iin => DSSN_CREPINE_Iin, 
			PORT_vin => DSSN_CREPINE_vin, 
			PORT_nin => DSSN_CREPINE_nin, 
			PORT_qin => DSSN_CREPINE_qin, 
			PORT_sin => DSSN_CREPINE_sin, 
			PORT_uin => DSSN_CREPINE_uin, 
			PORT_fcin => DSSN_CREPINE_fcin, 
			PORT_vout => DSSN_CREPINE_vout, 
			PORT_nout => DSSN_CREPINE_nout, 
			PORT_qout => DSSN_CREPINE_qout, 
			PORT_sout => DSSN_CREPINE_sout, 
			PORT_uout => DSSN_CREPINE_uout, 
			PORT_fcout => DSSN_CREPINE_fcout, 
			PORT_spike_flag => DSSN_CREPINE_spike_flag
		);
		blk_mem_v_0 : blk_mem_v
		PORT MAP(
			clka => clk100, 
			wea => mem_v_wea, 
			addra => mem_v_addra, 
			dina => mem_v_dina, 
			douta => mem_v_douta
		);
		blk_mem_n_0 : blk_mem_n
		PORT MAP(
			clka => clk100, 
			wea => mem_n_wea, 
			addra => mem_n_addra, 
			dina => mem_n_dina, 
			douta => mem_n_douta
		);
		blk_mem_q_0 : blk_mem_q
		PORT MAP(
			clka => clk100, 
			wea => mem_q_wea, 
			addra => mem_q_addra, 
			dina => mem_q_dina, 
			douta => mem_q_douta
		);
		blk_mem_u_0 : blk_mem_u
		PORT MAP(
			clka => clk100, 
			wea => mem_u_wea, --"0",--mem_u_wea,--
			addra => mem_u_addra, 
			dina => mem_u_dina, 
			douta => mem_u_douta
		);
		blk_mem_fc_0 : blk_mem_fc
		PORT MAP(
			clka => clk100, 
			wea => mem_fc_wea, 
			addra => mem_fc_addra, 
			dina => mem_fc_dina, 
			douta => mem_fc_douta
		);
END Behavioral;